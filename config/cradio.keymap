#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&sk {
    quick-release;
    lazy;
    release-after-ms = <800>;
};

&lt {
    flavor = "balanced";
    require-prior-idle-ms = <40>;
};

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "hmr";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-on-release;             // delay positional check until key-release
            flavor = "balanced";
            require-prior-idle-ms = <200>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "hml";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-on-release;
            flavor = "balanced";
            require-prior-idle-ms = <200>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 30 31>;
        };

        tapSk_holdLayer: tapSk_holdLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPSK_HOLDLAYER";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <80>;
            flavor = "balanced";
            hold-while-undecided;
        };

        LTHUMB: LTHUMB {
            compatible = "zmk,behavior-tap-dance";
            label = "LTHUMB";
            #binding-cells = <0>;
            bindings = <&tapSk_holdLayer 1 LEFT_SHIFT>, <&lt 3 LEFT_WIN>;

            tapping-term-ms = <380>;
        };
    };

    combos {
        compatible = "zmk,combos";

        capWords {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            timeout-ms = <150>;
            require-prior-idle-ms = <100>;
        };

        toSymb {
            bindings = <&mo 6>;
            key-positions = <30 33>;
            timeout-ms = <150>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        escL {
            timeout-ms = <40>;
            bindings = <&kp ESCAPE>;
            key-positions = <3 2>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        aphostrope {
            timeout-ms = <35>;
            bindings = <&kp SQT>;
            key-positions = <8 7>;
            layers = <0>;
        };

        backR {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0 5 4 6>;
        };

        backL {
            bindings = <&kp BACKSPACE>;
            key-positions = <12 13>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0 5 4 6>;
        };

        questionR {
            bindings = <&kp QUESTION>;
            key-positions = <27 28>;
            timeout-ms = <70>;
            require-prior-idle-ms = <80>;
            layers = <0>;
        };

        wordDel {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <12 11>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        delR {
            bindings = <&kp DELETE>;
            key-positions = <26 27>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0 5 4 6>;
        };

        wordDelR {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <17 18>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        delL {
            bindings = <&kp DELETE>;
            key-positions = <22 23>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0 5 4 6>;
        };

        enterL {
            bindings = <&kp ENTER>;
            key-positions = <21 22>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        LhandOHM {
            bindings = <&mo 8>;
            key-positions = <13 31>;
            timeout-ms = <40>;
            slow-release;
            require-prior-idle-ms = <100>;
        };

        RhandOHM {
            bindings = <&mo 8>;
            key-positions = <16 32>;
            timeout-ms = <40>;
            slow-release;
            require-prior-idle-ms = <100>;
        };

        moMouse {
            bindings = <&mo 9>;
            key-positions = <11 12 13 31>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <100>;
        };

        toAdj {
            bindings = <&mo 7>;
            key-positions = <11 12 13 31 10>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <100>;
        };

        toLeftMedia-Nav {
            bindings = <&mo 10>;
            key-positions = <31 1 2 3>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        L0 {
            bindings = <
&kp Q            &kp W            &kp E                &kp R              &kp T      &kp Y        &kp U              &kp I                &kp O            &kp P
&hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G      &kp H        &hmr LEFT_SHIFT J  &hmr LEFT_CONTROL K  &hmr LEFT_ALT L  &hmr LEFT_GUI SEMICOLON
&kp Z            &kp X            &kp C                &kp V              &kp B      &kp N        &kp M              &kp COMMA            &kp DOT          &kp FSLH
                                                       &lt 2 TAB          &LTHUMB    &lt 4 SPACE  &lt 5 ENTER
            >;
        };

        customWinSc {
            bindings = <
&kp LG(LC(F4))  &kp LG(TAB)    &kp LC(LG(LEFT_ARROW))  &kp LC(LG(RIGHT))  &kp LG(LC(D))    &none  &caps_word  &none  &none  &none
&kp LC(A)       &kp LC(X)      &kp LC(C)               &kp LC(V)          &kp LG(E)        &none  &none       &none  &none  &none
&kp LC(Z)       &kp C_AC_HOME  &kp LG(LS(S))           &kp LG(D)          &kp LA(F4)       &none  &none       &none  &none  &none
                                                       &none              &none            &none  &none
            >;
        };

        fn {
            bindings = <
&none        &kp F7  &kp F8  &kp F9  &kp F12    &none            &none           &none      &none     &none
&none        &kp F4  &kp F5  &kp F6  &kp F11    &kp PRINTSCREEN  &sk LEFT_SHIFT  &sk LCTRL  &sk LALT  &sk LEFT_GUI
&key_repeat  &kp F1  &kp F2  &kp F3  &kp F10    &kp CAPS         &kp LEFT_SHIFT  &kp LCTRL  &kp LALT  &kp LEFT_GUI
                             &none   &none      &none            &none
            >;
        };

        customIpadSC {
            bindings = <
&none      &none      &none                 &none      &none    &none  &none  &none  &none  &none
&kp LG(A)  &kp LG(X)  &kp LG(C)             &kp LG(V)  &none    &none  &none  &none  &none  &none
&kp LG(Z)  &none      &kp LG(LS(NUMBER_4))  &kp LG(H)  &none    &none  &none  &none  &none  &none
                                            &none      &none    &none  &none
            >;
        };

        num {
            bindings = <
&none         &none     &none      &none           &none    &kp PLUS   &kp N7   &kp N8  &kp N9  &kp ASTERISK
&sk LEFT_GUI  &sk LALT  &sk LCTRL  &sk LSHFT       &none    &kp MINUS  &kp N4   &kp N5  &kp N6  &kp SLASH
&kp LEFT_GUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &none    &kp N0     &kp N1   &kp N2  &kp N3  &kp EQUAL
                                   &none           &none    &none      &kp DOT
            >;
        };

        nav-media {
            bindings = <
&none         &none     &none      &none           &none    &kp C_VOL_UP  &kp PG_UP   &kp UP      &kp PG_DN   &kp C_MUTE
&sk LEFT_GUI  &sk LALT  &sk LCTRL  &sk LSHFT       &none    &kp HOME      &kp LEFT    &kp DOWN    &kp RIGHT   &kp END
&kp LEFT_GUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &none    &kp C_VOL_DN  &kp C_PREV  &kp C_PLAY  &kp C_NEXT  &kp K_CMENU
                                   &none           &none    &none         &none
            >;
        };

        symb {
            bindings = <
&kp EXCL      &kp AT    &kp HASH       &kp DLLR          &kp PERCENT          &kp PLUS   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GRAVE  &kp STAR
&kp LEFT_GUI  &kp LALT  &kp LCTRL      &kp LEFT_SHIFT    &none                &kp MINUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDER  &kp SLASH
&kp CARET     &kp AMPS  &kp BACKSLASH  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES    &kp PIPE   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp TILDE  &kp EQUAL
                                       &none             &none                &none      &none
            >;
        };

        adj {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2          &bt BT_SEL 3   &bt BT_SEL 4    &none        &none  &none  &none  &none
&none         &none         &kp C_BRIGHTNESS_DEC  &kp C_BRI_INC  &none           &none        &none  &none  &none  &none
&none         &none         &none                 &none          &out OUT_TOG    &none        &none  &none  &none  &none
                                                  &bt BT_CLR     &bootloader     &bootloader  &none
            >;
        };

        oneHandMods {
            bindings = <
&none         &none     &none      &none      &none    &none  &none      &none      &none     &none
&sk LEFT_WIN  &sk LALT  &sk LCTRL  &sk LSHFT  &none    &none  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LEFT_WIN
&kp LEFT_WIN  &kp LALT  &kp LCTRL  &kp LSHFT  &none    &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LEFT_WIN
                                   &none      &none    &none  &none
            >;
        };

        mouse {
            bindings = <
&none             &none     &none     &none     &none    &none  &none  &none  &none  &none
&kp LEFT_SHIFT    &mkp MB2  &mkp MB3  &mkp MB1  &none    &none  &none  &none  &none  &none
&kp LEFT_CONTROL  &none     &none     &none     &none    &none  &none  &none  &none  &none
                                      &none     &none    &none  &none
            >;
        };

        leftNav-Media {
            bindings = <
&none           &kp HOME    &kp UP      &kp END     &kp C_VOLUME_UP    &trans  &trans  &trans  &trans  &trans
&kp LEFT_WIN    &kp LEFT    &kp DOWN    &kp RIGHT   &kp C_MUTE         &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp C_PREV  &kp C_PLAY  &kp C_NEXT  &kp C_VOL_DN       &trans  &trans  &trans  &trans  &trans
                                        &trans      &trans             &trans  &trans
            >;
        };
    };
};
